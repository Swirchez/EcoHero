import telebot
from telebot import types
import random

bot = telebot.TeleBot('TOKEN')
user_data = {}
numbers = '0123456789'
letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

quizzes = {
    "–ù–æ–≤–∏—á–æ–∫ üå±": [
        {
            "question": "–°–∫–æ–ª—å–∫–æ –ª–µ—Ç —Ä–∞–∑–ª–∞–≥–∞–µ—Ç—Å—è –ø–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è –±—É—Ç—ã–ª–∫–∞?",
            "options": ["50 –ª–µ—Ç", "200 –ª–µ—Ç", "450 –ª–µ—Ç", "500 –ª–µ—Ç"],
            "answer": 2
        },
        {
            "question": "–ö–∞–∫–æ–π —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è —Å–∞–º—ã–π —ç–∫–æ–ª–æ–≥–∏—á–Ω—ã–π?",
            "options": ["–ê–≤—Ç–æ–º–æ–±–∏–ª—å", "–í–µ–ª–æ—Å–∏–ø–µ–¥", "–°–∞–º–æ–ª–µ—Ç", "–ê–≤—Ç–æ–±—É—Å"],
            "answer": 1
        },
        {
            "question": "–ö–∞–∫–∞—è –∏–∑ —ç—Ç–∏—Ö –≤–µ—â–µ–π —è–≤–ª—è–µ—Ç—Å—è –±–∏–æ–¥–µ–≥—Ä–∞–¥–∏—Ä—É–µ–º–æ–π?",
            "options": ["–ü–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è —É–ø–∞–∫–æ–≤–∫–∞", "–°—Ç–µ–∫–ª—è–Ω–Ω–∞—è –±—É—Ç—ã–ª–∫–∞", "–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è –±–∞–Ω–∫–∞", "–ë–∞–Ω–∞–Ω–æ–≤–∞—è –∫–æ–∂—É—Ä–∞"],
            "answer": 3
        },
        {
            "question": "–ß—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å?",
            "options": ["–ì–∞–∑–µ—Ç–∞", "–°—Ç–µ–∫–ª–æ", "–ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª", "–ü–ª–∞—Å—Ç–∏–∫"],
            "answer": 2
        },
        {
            "question": "–ö–∞–∫–æ–π –≤–∏–¥ –æ—Ç—Ö–æ–¥–æ–≤ –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ 100%?",
            "options": ["–ü–ª–∞—Å—Ç–∏–∫", "–°—Ç–µ–∫–ª–æ", "–ú–µ—Ç–∞–ª–ª", "–ë—É–º–∞–≥–∞"],
            "answer": 1
        }
    ],
    "–õ—é–±–∏—Ç–µ–ª—å üåø": [
        {
            "question": "–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã —Ç—Ä–∞—Ç–∏—Ç—Å—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ 1 –∫–≥ –≥–æ–≤—è–¥–∏–Ω—ã?",
            "options": ["15 000 –ª–∏—Ç—Ä–æ–≤", "5 000 –ª–∏—Ç—Ä–æ–≤", "1000 –ª–∏—Ç—Ä–æ–≤", "500 –ª–∏—Ç—Ä–æ–≤"],
            "answer": 0
        },
        {
            "question": "–ß—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å?",
            "options": ["–°—Ç–µ–∫–ª—è–Ω–Ω–∞—è –±—É—Ç—ã–ª–∫–∞", "–ü–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è —É–ø–∞–∫–æ–≤–∫–∞", "–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Å—Ç–∞–∫–∞–Ω—á–∏–∫ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º", "–ö–æ–Ω—Å–µ—Ä–≤–Ω–∞—è –±–∞–Ω–∫–∞"],
            "answer": 2
        },
        {
            "question": "–ö–∞–∫—É—é —ç–Ω–µ—Ä–≥–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –≤–µ—Ç—Ä—è–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞?",
            "options": ["–¢–µ–ø–ª–æ–≤–∞—è —ç–Ω–µ—Ä–≥–∏—è", "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è", "–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è", "–•–∏–º–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è"],
            "answer": 1
        },
        {
            "question": "–ö–∞–∫–æ–π –∏–∑ —ç—Ç–∏—Ö –≤–∏–¥–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–∞–∏–º–µ–Ω–µ–µ —ç–∫–æ–ª–æ–≥–∏—á–µ–Ω?",
            "options": ["–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π –∞–≤—Ç–æ–±—É—Å", "–ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å", "–¢—Ä–∞–º–≤–∞–π", "–°–∞–º–æ–ª–µ—Ç"],
            "answer": 3
        },
        {
            "question": "–ö–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å —è–≤–ª—è–µ—Ç—Å—è –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º—ã–º?",
            "options": ["–ì–∞–∑", "–£–≥–æ–ª—å", "–°–æ–ª–Ω–µ—á–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è", "–ù–µ—Ñ—Ç—å"],
            "answer": 2
        }
    ],
    "–≠–∫—Å–ø–µ—Ä—Ç üå≥": [
        {
            "question": "–ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–ª–∞—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –º–∏—Ä–µ?",
            "options": ["9%", "15%", "25%", "50%"],
            "answer": 0
        },
        {
            "question": "–°–∫–æ–ª—å–∫–æ CO2 –≤—ã–¥–µ–ª—è–µ—Ç –æ–¥–∏–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ?",
            "options": ["0.2 –≥—Ä–∞–º–º–∞", "2 –≥—Ä–∞–º–º–∞", "5 –≥—Ä–∞–º–º–æ–≤", "20 –≥—Ä–∞–º–º"],
            "answer": 1
        },
        {
            "question": "–ö–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —É–≥–ª–µ–∫–∏—Å–ª–æ–≥–æ –≥–∞–∑–∞ –Ω–∞ –¥—É—à—É –Ω–∞—Å–µ–ª–µ–Ω–∏—è?",
            "options": ["–°–®–ê", "–ö–∏—Ç–∞–π", "–†–æ—Å—Å–∏—è", "–ö–∞—Ç–∞—Ä"],
            "answer": 3
        },
        {
            "question": "–ö–∞–∫–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π?",
            "options": ["–ú–µ–¥—å", "–ó–æ–ª–æ—Ç–æ", "–ö—Ä–µ–º–Ω–∏–π", "–°—Ç–∞–ª—å"],
            "answer": 2
        },
        {
            "question": "–ö–∞–∫–æ–π –∏–∑ —ç—Ç–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º—ã–º —á–∏—Å—Ç—ã–º?",
            "options": ["–£–≥–ª–µ–¥–æ–±—ã—á–∞", "–ì–∏–¥—Ä–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞", "–í–µ—Ç—Ä–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞", "–Ø–¥–µ—Ä–Ω–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞"],
            "answer": 2
        }
    ]
}

def show_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
    markup.row("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üè¨ –ú–∞–≥–∞–∑–∏–Ω")
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton("–ù–æ–≤–∏—á–æ–∫ üå±")
    button2 = types.KeyboardButton("–õ—é–±–∏—Ç–µ–ª—å üåø")
    button3 = types.KeyboardButton("–≠–∫—Å–ø–µ—Ä—Ç üå≥")
    markup.add(button1, button2, button3)
    
    bot.send_message(
        message.chat.id, 
        "–ü—Ä–∏–≤–µ—Ç, –Ø EcoHero, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≤–∫–ª–∞–¥–∞ –≤ —ç–∫–æ–ª–æ–≥–∏—é. –í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ä–∞–Ω–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", 
        reply_markup=markup
    )
    
    if message.from_user.id not in user_data:
        user_data[message.from_user.id] = {
            'points': 0,
            'rank': None,
            'completed_quizzes': 0,
            'promocodes': [],
            'vip': "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π"
        }

@bot.message_handler(func=lambda message: message.text in ["–ù–æ–≤–∏—á–æ–∫ üå±", "–õ—é–±–∏—Ç–µ–ª—å üåø", "–≠–∫—Å–ø–µ—Ä—Ç üå≥"])
def set_rank(message):
    user_id = message.from_user.id
    rank = message.text
    user_data[user_id]['rank'] = rank

    show_main_menu(message.chat.id)
    
    bot.send_message(
        message.chat.id,
        "–¢–≤–æ–π —Ä–∞–Ω–≥: " + rank + ". –ù–∞–∂–º–∏ 'üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –¥–∞–¥—É—Ç –≠–∫–æ–ë–∞–ª–ª—ã."
    )

@bot.message_handler(func=lambda message: message.text == "üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
def send_quiz(message):
    user_id = message.from_user.id
    
    if user_id not in user_data or user_data[user_id]['rank'] is None:
        start(message)
        return
    
    rank = user_data[user_id]['rank']
    if rank in quizzes and quizzes[rank]:
        quiz = random.choice(quizzes[rank])
        
        markup = types.InlineKeyboardMarkup()
        for i, option in enumerate(quiz["options"]):
            button = types.InlineKeyboardButton(option, callback_data="quiz_" + str(i))
            markup.add(button)
        
        bot.send_message(
            message.chat.id,
            "üìö –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ (" + rank + "): " + quiz['question'],
            reply_markup=markup
        )
    else:
        bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω –¥–ª—è —Ç–≤–æ–µ–≥–æ —Ä–∞–Ω–≥–∞")

@bot.message_handler(func=lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def show_stats(message):
    user_id = message.from_user.id
    if user_id in user_data:
        stats = user_data[user_id]
        message_text = (
            "üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            "‚Ä¢ –†–∞–Ω–≥: " + (stats['rank'] if stats['rank'] else '–ù–µ –≤—ã–±—Ä–∞–Ω') + "\n"
            "‚Ä¢ –≠–∫–æ–ë–∞–ª–ª—ã: " + str(stats['points']) + "\n"
            "‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω: " + str(stats['completed_quizzes']) + "\n"
            "‚Ä¢ –ü—Ä–æ–º–æ–∫–æ–¥—ã: " + (', '.join(stats['promocodes']) if stats['promocodes'] else '–ù–µ—Ç') + "\n"
            "‚Ä¢ VIP-—Å—Ç–∞—Ç—É—Å: " + stats['vip']
        )
        bot.send_message(message.chat.id, message_text)
    else:
        start(message)

@bot.callback_query_handler(func=lambda call: call.data.startswith('quiz_'))
def handle_quiz_answer(call):
    user_id = call.from_user.id
    if user_id not in user_data:
        return
    
    selected_option = int(call.data.split('_')[1])
    rank = user_data[user_id]['rank']
    
    if rank not in quizzes:
        return
    
    for quiz in quizzes[rank]:
        if quiz['question'] in call.message.text:
            correct_answer = quiz['answer']
            break
    else:
        return
    
    if selected_option == correct_answer:
        points_earned = 15
        user_data[user_id]['points'] += points_earned
        user_data[user_id]['completed_quizzes'] += 1
        
        message_text = (
            "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +" + str(points_earned) + " –≠–∫–æ–ë–∞–ª–ª–æ–≤.\n"
            "–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: " + str(user_data[user_id]['points'])
        )
    else:
        correct_option = quiz['options'][correct_answer]
        message_text = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: " + correct_option
    
    bot.answer_callback_query(call.id, message_text, show_alert=True)
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=None
    )

@bot.message_handler(func=lambda message: message.text == "üè¨ –ú–∞–≥–∞–∑–∏–Ω")
def shop(message):
    user_id = message.from_user.id
    
    if user_id not in user_data:
        start(message)
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("–ö—É–ø–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ (45 –±–∞–ª–ª–æ–≤)")
    markup.row("–ö—É–ø–∏—Ç—å VIP-—Å—Ç–∞—Ç—É—Å (150 –±–∞–ª–ª–æ–≤)")
    markup.row("–ù–∞–∑–∞–¥")
    
    balance = user_data[user_id]['points']
    shop_message = (
        "üè¨ –ú–∞–≥–∞–∑–∏–Ω\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"
        "- –ö—É–ø–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∑–∞ 45 –≠–∫–æ–ë–∞–ª–ª–æ–≤\n"
        "- –ö—É–ø–∏—Ç—å VIP-—Å—Ç–∞—Ç—É—Å –∑–∞ 150 –≠–∫–æ–ë–∞–ª–ª–æ–≤\n\n"
        "–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: " + str(balance) + " –≠–∫–æ–ë–∞–ª–ª–æ–≤"
    )
    
    bot.send_message(message.chat.id, shop_message, reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–ö—É–ø–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ (45 –±–∞–ª–ª–æ–≤)")
def buy_promo(message):
    user_id = message.from_user.id
    
    if user_id not in user_data:
        start(message)
        return
    
    if user_data[user_id]['points'] < 45:
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≠–∫–æ–ë–∞–ª–ª–æ–≤! –ù—É–∂–Ω–æ 45, –∞ —É —Ç–µ–±—è —Ç–æ–ª—å–∫–æ " + str(user_data[user_id]['points']) + ".\n"
            "–í—ã–ø–æ–ª–Ω—è–π –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–∏–π!",
            reply_markup=types.ReplyKeyboardRemove()
        )
        show_main_menu(message.chat.id)
        return
    
    promocode = (
        ''.join(random.choices(letters, k=3)) +
        random.choice(numbers) +
        ''.join(random.choices(letters, k=3)) +
        random.choice(numbers)
    )
    
    user_data[user_id]['points'] -= 45
    user_data[user_id]['promocodes'].append(promocode)
    
    bot.send_message(
        message.chat.id,
        "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥: " + promocode + ".\n"
        "–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: " + str(user_data[user_id]['points']) + " –≠–∫–æ–ë–∞–ª–ª–æ–≤",
        reply_markup=types.ReplyKeyboardRemove()
    )
    
    show_main_menu(message.chat.id)

@bot.message_handler(func=lambda message: message.text == "–ö—É–ø–∏—Ç—å VIP-—Å—Ç–∞—Ç—É—Å (150 –±–∞–ª–ª–æ–≤)")
def buy_vip(message):
    user_id = message.from_user.id
    
    if user_id not in user_data:
        start(message)
        return
    
    if user_data[user_id]['points'] < 150:
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≠–∫–æ–ë–∞–ª–ª–æ–≤! –ù—É–∂–Ω–æ 150, –∞ —É —Ç–µ–±—è —Ç–æ–ª—å–∫–æ " + str(user_data[user_id]['points']) + ".\n"
            "–í—ã–ø–æ–ª–Ω—è–π –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–∏–π!",
            reply_markup=types.ReplyKeyboardRemove()
        )
        show_main_menu(message.chat.id)
        return
    
    user_data[user_id]['points'] -= 150
    user_data[user_id]['vip'] = "–ê–∫—Ç–∏–≤–Ω—ã–πüëë"

    bot.send_message(
        message.chat.id,
        "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ VIP-—Å—Ç–∞—Ç—É—Å.\n"
        "–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: " + str(user_data[user_id]['points']) + " –≠–∫–æ–ë–∞–ª–ª–æ–≤",
        reply_markup=types.ReplyKeyboardRemove()
    )
    
    show_main_menu(message.chat.id)

@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥")
def back_to_menu(message):
    show_main_menu(message.chat.id)

if __name__ == '__main__':
    print("EcoHero –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)
